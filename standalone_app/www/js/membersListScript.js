$(document).on('pageinit', '#membersList', function(event){
	event.preventDefault();
	event.stopPropagation();
	
	$('#injectedContent').html('');
	
	/* Open a form to create new member, and each input field is set to blank */
	$("#popupAddNewMemberForm").on("click", function(){

		$('#createName').val("");
		$('#createKey').val("");
		$('#createDate').val("");
		$('#createComment').val("");
        $("#popUpAddNewMember").popup("open"); 
    //    setTimeout(function(){  $("#popUpAddNewMember").popup("close"); }, 5000);
    });
	
	/*
		Adding listener to the cloe button in order to dismiss the popup windows
	*/
	$("#closeNewMemberForm").click(function(e) {
		e.preventDefault();
		
		//Call the ajax in order to fetch all members from database
		ajaxCall.fetchAllMembers(APPATTRIBUTE.validation);
		
		$('.name_error').html('');
		$('.key_error').html('');
        $('#popUpAddNewMember').popup('close');		
	}); // end closeNewMemberForm
	
	/*  This function is for saving new member profile into a database. 
		The following action takes place when the save button is triggered by user.
	*/
	
	$("#saveNewMemberForm").click(function(e) {
		e.preventDefault();
		
		// Resetting values of attributes before storing new values
		helper.resetFormVariables();
		
		// Hold form values
		APPATTRIBUTE.addName = $('#createName').val();
		APPATTRIBUTE.addKey = $('#createKey').val();
		APPATTRIBUTE.addDate = $('#createDate').val();
		APPATTRIBUTE.addComment = $('#createComment').val();
		APPATTRIBUTE.addValidation = true;
		
		// Perform validation process
		helper.addNewMemberFormValidation(APPATTRIBUTE.addName, APPATTRIBUTE.addKey, APPATTRIBUTE.addDate);
		if(APPATTRIBUTE.addValidation) {
			e.preventDefault();

			APPATTRIBUTE.userSubmit[0] = APPATTRIBUTE.validation;
			APPATTRIBUTE.userSubmit[1] = APPATTRIBUTE.addName;
			APPATTRIBUTE.userSubmit[2] = APPATTRIBUTE.addKey;
			APPATTRIBUTE.userSubmit[3] = APPATTRIBUTE.addDate;
			APPATTRIBUTE.userSubmit[4] = APPATTRIBUTE.addComment;

			ajaxCall.addNewProfile(APPATTRIBUTE.userSubmit);
		}
		else {
			alert('kitöltési hiba!');
		}
	});
	/* 
	   This function is a registered button listener of one of the generated subcomponent.
	   Each set of collapsible-set consists of three buttons which are generated by web API.
	   Since these are dynamically injected therefore this function allows us to find the corresponding 
	   member's id and which button is selected by user. 
	   The first button is responsible for update a membership date, calling updateAPI.php.
	   The second option is for modifying user details, thus it triggers change page event, including a user profile form.
	   Finally, the last button is for delete member's profile, firstly it triggers a pop up dialog. 
	   The dialog asks user to make sure of the deleting action from the database. 
	*/
	// This button listener is for updateMembership date button
	$('#injectedContent').on('click', '.renewMembershipBtn', function (event) {
		try{

			APPATTRIBUTE.renewableProfileId = [];
			var urlid = $(this).attr('id'); // read in id of correponding button
			var isclass = $(this).attr('class');
			// get the item id -- calls helperGlobal.js
			APPATTRIBUTE.renewBtnId = helper.chopperString(urlid); // call splitter function to retrive the pure product's id
			
			APPATTRIBUTE.renewableProfileId[0] = APPATTRIBUTE.validation;
			APPATTRIBUTE.renewableProfileId[1] = APPATTRIBUTE.renewBtnId;

			//Inject corresponding member's details in a form of JSON
			ajaxCall.findRenewableMember(APPATTRIBUTE.renewableProfileId);
			event.preventDefault();
			event.stopPropagation();
			
		//	$.mobile.changePage('#renewMembership');
		} catch(err) {
			alert('Renew Membership Button ERROR: ' + err);
		}
		return false;
	});
	
	// This button listener is for delete button
	$('#injectedContent').on('click', '.deleteBtn', function (event) {
		try{
			APPATTRIBUTE.removableProfileId = [];
			var urlid = $(this).attr('id'); // read in id of correponding button
			var isclass = $(this).attr('class');
			// get the item id -- calls helperGlobal.js
			APPATTRIBUTE.deleteBtnId = helper.chopperString(urlid); // call splitter function to retrive the pure product's id
			
			APPATTRIBUTE.removableProfileId[0] = APPATTRIBUTE.validation;
			APPATTRIBUTE.removableProfileId[1] = APPATTRIBUTE.deleteBtnId;
			
			//Inject corresponding member's details in a form of JSON
			ajaxCall.findRemovableMember(APPATTRIBUTE.removableProfileId);
			event.preventDefault();
			event.stopPropagation();
			
			$.mobile.changePage('#removeMember');

		} catch(err) {
			alert('Delete Button ERROR: ' + err);
		}
		return false;
	});
	/*
		Live Search function in order to find particular member's profile based on key or name value.
	*/

	$('#filterData').keyup(function(){  
		var txt = $(this).val(); 
		$('#injectedContent').html('');
		APPATTRIBUTE.searchKey = [];
        if(txt != '' && !/^[0-9\s]+$/i.test(txt))  {
			APPATTRIBUTE.searchKey[0] = APPATTRIBUTE.validation;
			APPATTRIBUTE.searchKey[1] = txt;
			//alert(APPATTRIBUTE.searchKey[1]);
			ajaxCall.searchMembers(APPATTRIBUTE.searchKey); //live search among saved profiles
        }
		else if(txt != '' && (/^[0-9\s]+$/i.test(txt))) {
			var tempSearchkey = txt.toString();
			APPATTRIBUTE.searchKey[0] = APPATTRIBUTE.validation;
			APPATTRIBUTE.searchKey[1] = tempSearchkey;
			//alert(APPATTRIBUTE.searchKey[1]);
			ajaxCall.searchKey(APPATTRIBUTE.searchKey);
		}	
        else  {  
			//Call the ajax in order to fetch all members from database
			ajaxCall.fetchAllMembers(APPATTRIBUTE.validation);
			$('#filterData').blur();
        }  
    });  
/*
	This section is for handling the overflow menu section. 
	Each element of the menu list has a button listener. 
	The listener is responsible for detecting user’s input and 
	loading a require content.
*/
	//Logout once this button is selected by user
	$("#menuLogout").click(function(e) {
		e.preventDefault();		
		navigator.app.exitApp();
	});	
	
	//Controll setting option, not exist in this version
	$("#menuSettings").click(function(e) {
		e.preventDefault();		
		alert('Ez az opció a jelen verzioban nem elérhető!');
	});	
	
	//Help option 
	$("#menuHelp").click(function(e) {
		e.preventDefault();		
		alert('Fejlesztés alatt!');
	});	
	
	//Re-fetching data from database
	$("#menuRefresh").click(function(e) {
		e.preventDefault();	
		ajaxCall.fetchAllMembers(APPATTRIBUTE.validation);		
	});
});
